check for one pair , 2 pairs, 3 of a kind, 4 of a kind, full house:



if we hold 1 pairs already
	if count = 1
		one pair 1
	if count = 2
		two pairs2
	if count 3
		three of a kind 3
	if count = 5
		four of a kind 5
		break
	check community for three of a kind
		if true
		full house 4
if we don't hold matching pairs already

	if count = 1
		one pair 1
	if count = 2
		call func to check for three of a kind 3
			if this is false
		two pairs 2
	if count >= 3
		check for 4 of a kind and full house
			if 4 of a kind
				return 5
				break
			if full house
				return 4
				break

Ex:
5 5   4 5  9 7
i
  j
             k



 4 9  (2 3 5 6 8)



2  3  4  5  6 


 5 7
2 3 4 (5) 6 (7) 8  



7 size array
	if community has straight
		nothing (because it's a 0.39 percent chance that it would happen)

	if community has 4 consecutive
		pass first card to check for consecutive( backward)
		pass second card to check for consecutive( backward)
		if straight is true record last card used (highest value)
	if community has 3 consecutive
		pass both in and check for consecutive ( backward)
		if straight is true record last card used (highest value)

Ex:
p1 5 11 wins at 34567
p2 5 9 wins 34567

2 3 4 (5) 6 7 (9)

2 3 4 5 6   8 9 






Flush:


determine suit of 2 player cards
	find if the suits match
		ADD 1 TO MATCH
			IF MATCH EQUALS 1
				then compare with community
				if communityMatch = 3 && match = 1 return flush
				else
				nothing		
else 
compare first card with community card until match suits
use that suit and make a counter, 4 match == true  
	if false
		sets match back to 0 to compare the next card with community cards
	
Ex:
H C  H H D H H

Straight flush

	if flush = true && straight == true
		then true
			send combination to royal flush
	else 
	nothing

royal flush
	highest is Ace and consecutive
		




cases for pairs functions


// 2 3 | 2 4 4 8 8 (2 pairs) with count 1

// 2 3 | 4 2 3 5 5 2pairs value 2

// 2 3 | 2 2 4 6 8 three of a kind value 2


// 2 3 |  2 2 2 4 6 four of a kind 3 count
// 2 3 |  2 2 3 2 4 four of a kind 4 count
// 2 3 |  2 2 2 3 3 four of a kind 5 count



// 2 3 | 2 2 4 5 5 full house 2 count*
// 2 3 | 2 4 5 5 5 full house count 1 ^
// 2 3 | 4 4 4 2 3 full house 2 count ^
// 2 3 |  2 3 2 3 4  full house 4 count &
// 2 3 |  2 2 3 5 5 full house and three of a kind value 3*
// 2 3 |  2 2 3 4 9 full house and three of a kind value 3&
// 2 3 |  4 4 4 2 2 full house count 3 ^









 

